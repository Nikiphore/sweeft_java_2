import java.util.Arrays;

public class Task5 {
    public void runner(){
        int [] array = {6,2,2,3,4,1};
        int k = 8;
        System.out.println("maximum number of elements from " + Arrays.toString(array) +" whose sum is "+ k + " = " + lenOfLongSubarr(array, k));
    }

    // ამ ამოცანაში გამოყენებულია ზურგჩანთის ამოცანის მიდგომა დინამიური პროგრამირების გამოყენებით. ამოხსნა მუშაობს დადებით რიცხვებზე. ვფიქრობ უარყოფითებით ზედმეტად კომპლექსური ხდებოდა.
    public int lenOfLongSubarr(int[] array, int k) {
        int n = array.length;
        int[][] dp = new int[n + 1][k + 1]; // ვქმნით ორგანზომილებიან მასივს. თითოეულ სტრიქონში არის ინფორმაცია პირველი i რიცხვით რა შესაძლო ჯამების მიღება შეიძლება k-მდე. 0 თუ წერია ის ჯამი ვერ მიიღება, 0-ზე მეტი კი ნიშნავს რომ ჩაწერილი რიცხვია მაქსიმალური რაოდენობა მოცემული ჯამის მისაღებად პირველ i ელემენტში.

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                if (array[i - 1] <= j) { // i-ური ელემენტი თუ ნაკლებია ან ტოლია მიმდინარე ჯამდე, ანუ j-ზე
                    dp[i][j] = Math.max(dp[i - 1][j], 1 + dp[i - 1][j - array[i - 1]]); // ვირჩევთ მაქსიმალურ ელემენტს ახალი i-ური წევრის დამატებით და მის გარეშე წინა მასივიდან წამოღებით. ახალი რიცხვის დამატება არ ნიშნავს რაოდენობის გაზრდას
                } else {
                    dp[i][j] = dp[i - 1][j]; // სრულდება მაშინ, როცა i-ური ელემენტი მეტია მიმდინარე ჯამზე და ზედა სტრიქონიდან ჩამოაქვს მნიშვნელობა
                }
            }
        }
        return Math.max(dp[n][k], 0); // თუ მოცემული რიცხვებით შესაძლებელია k ჯამის მირება, მაშინ ის აუცილებლად იქნება მატრიცაში [n][k] ინდექსზე. თუ 0 წერია, ნიშნავს რომ ასეთი ჯამი არ არსებობს. თუ 0-ზე მეტი, ესეიგი მაგ რიცხვის რაოდენობის ელემენტით მიიღება k
    }
}
